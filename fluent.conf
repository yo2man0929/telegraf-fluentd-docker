<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<filter **>
  @type grep
  <exclude>
    key log
    pattern / \/akamai | \/status | \/status.html /
  </exclude>
</filter>


<filter **>
    @type parser
    key_name log
    reserve_data false
    remove_key_name_field true
    <parse>
        @type regexp
        expression /^\[AccessLog\] \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} - - \[(\d{2}/\w+/\d{4}:\d{2}:\d{2}:\d{2} \+\d{4})\] "(?<requestPath>.+)" (?<statusCode>\d{3}) \d+ "-" ".+" (?<latency>\d+)ms/
        # [AccessLog] 10.10.136.229 - - [11/Aug/2020:10:32:19 +0000] "GET /status.html HTTP/1.1" 200 0 "-" "ELB-HealthChecker/2.0" 1ms
        time_key logTime
        time_format %d/%b/%Y:%H:%M:%S %z
        types statusCode:string,latency:integer,requestPath:string
    </parse>
</filter>

<filter **>
    @type record_transformer
    enable_ruby true
    renew_record true
    auto_typecast true
    <record>
        dimensions ${{"region" => "#{ENV['S3_REGION']}","service" => tag.gsub('service', 'accesslog'), "vhost": record['requestPath'].index(/ \/akamai | \/status | \/status.html /)?"monitoring":"other"}}
        # metrics ${{"status" => record['statusCode'], "latency" => record['latency']}}
        metrics ${{"status_4xx" => record['statusCode'].start_with?("4")?1:0, "status_5xx" => record['statusCode'].start_with?("5")?1:0, "status_3xx" => record['statusCode'].start_with?("3")?1:0, "status_2xx" => record['statusCode'].start_with?("2")?1:0, "latency" => record['latency']}}
        application "ecs-telegraf"
        timestamp ${time.strftime("%s").to_i}
    </record>
</filter>

# NormalizedFileInByte ${if record["message"].split(" ")[2].split(",")[0] =/= "PM"; record["message"].split(" ")[2].split(",")[0] ;end;
<match **>
  @type stats
  interval 60s
  sum ^reqtime$
  sum_keys status_2xx, status_3xx, status_4xx, status_5xx, latency 
  sum_suffix _sum
  add_tag_prefix stats
  
</match>

<match stats.**>
  @type copy
  type bufferize
  buffer_type file
  buffer_path /var/log/fluent/myapp.*.buffer
  <config>
    type http
    endpoint_url  "#{ENV['TELEGRAF_HOST']}"
    http_method     post    # default: post
    serializer      json  # default: form
  </config>
# <store>
# @type stdout
# </store>
</match>
